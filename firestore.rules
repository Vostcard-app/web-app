rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read and write their own scripts
    match /scripts/{userId}/userScripts/{scriptId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read and write their own vostcards
    match /vostcards/{vostcardId} {
      allow read: if true; // Allow all users to read vostcards (for the map)
      allow write: if request.auth != null && request.auth.uid == resource.data.userID;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userID;
      
      // Allow authenticated users to read and write like counts
      match /likeCount/{document} {
        allow read: if true; // Anyone can read like counts
        allow write: if request.auth != null; // Only authenticated users can modify like counts
      }
      
      // Allow authenticated users to manage ratings
      match /ratings/{userId} {
        allow read: if true; // Anyone can read ratings (for averages)
        allow write: if request.auth != null && request.auth.uid == userId; // Users can only write their own ratings
      }
      
      // Allow anyone to read rating stats, authenticated users to write
      match /ratingStats/{document} {
        allow read: if true; // Anyone can read rating statistics
        allow write: if request.auth != null; // Only authenticated users can update stats
      }
      
      // Allow authenticated users to manage comments
      match /comments/{commentId} {
        allow read: if true; // Anyone can read comments
        allow create: if request.auth != null; // Authenticated users can create comments
        allow delete: if request.auth != null && request.auth.uid == resource.data.userID; // Users can only delete their own comments
      }
    }
    
    // Allow authenticated users to read and write their own user profiles
    // Allow any authenticated user to read basic user info for following functionality
    // Allow unauthenticated reads for username uniqueness check during registration
    // Allow admins to update user roles for Guide conversion
    match /users/{userId} {
      allow read: if true; // Allow unauthenticated reads for username checking and authenticated reads for following
      allow write: if request.auth != null && request.auth.uid == userId; // Only allow users to write their own profile
      allow create: if request.auth != null && request.auth.uid == userId; // Explicitly allow creating user documents
      
      // Allow admins to update user roles for Guide conversion
      // Allow friend-related updates for authenticated users
      allow update: if request.auth != null && (
        request.auth.uid == userId || // User updating their own profile
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'convertedToGuideAt', 'convertedByAdmin'])) ||
        // Allow friend-related updates (business logic handles validation)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends', 'sentFriendRequests', 'pendingFriendRequests'])
      );
      
      // Allow authenticated users to manage their own likes
      match /likes/{vostcardId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Allow authenticated users to read and write their own advertiser profiles
    match /advertisers/{userId} {
      allow read: if request.auth != null; // Allow authenticated users to read advertiser profiles
      allow write: if request.auth != null && request.auth.uid == userId; // Only allow advertisers to write their own profile
      allow create: if request.auth != null && request.auth.uid == userId; // Explicitly allow creating advertiser documents
    }
    
    // Allow authenticated users to read and write their own business documents
    match /businesses/{userId} {
      allow read: if request.auth != null; // Allow authenticated users to read business profiles
      allow write: if request.auth != null && request.auth.uid == userId; // Only allow users to write their own business profile
      allow create: if request.auth != null && request.auth.uid == userId; // Explicitly allow creating business documents
    }
    
    // Allow authenticated users to create flag reports
    match /flags/{flagId} {
      allow create: if request.auth != null; // Allow authenticated users to create flag reports
      allow read: if request.auth != null && request.auth.uid == resource.data.flaggedBy; // Users can only read their own flags
      // Note: Updates and deletes should only be allowed for admins (not implemented yet)
    }
    
    // Allow authenticated users to manage private Vostcards
    match /privateVostcards/{privateVostcardId} {
      allow create: if request.auth != null; // Allow authenticated users to create private Vostcards
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.senderUserID || 
        request.auth.uid == resource.data.recipientUserID
      ); // Users can only read private Vostcards they sent or received
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.senderUserID || 
        request.auth.uid == resource.data.recipientUserID
      ); // Users can only update private Vostcards they sent or received
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.senderUserID || 
        request.auth.uid == resource.data.recipientUserID
      ); // Users can only delete private Vostcards they sent or received
    }
    
    // Allow authenticated users to manage their own deletion markers
    match /deletionMarkers/{markerId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userID;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userID;
    }
    
    // Allow authenticated users to manage friend requests
    match /friendRequests/{requestId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.senderUID || 
        request.auth.uid == resource.data.receiverUID
      );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderUID;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.senderUID || 
        request.auth.uid == resource.data.receiverUID
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.senderUID || 
        request.auth.uid == resource.data.receiverUID
      );
    }
    
    // Allow authenticated users to manage friendships
    match /friendships/{friendshipId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.user1UID || 
        request.auth.uid == resource.data.user2UID
      );
      allow create: if request.auth != null;
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.user1UID || 
        request.auth.uid == resource.data.user2UID
      );
    }

    // Allow authenticated users to read and write their own drivecards
    match /drivecards/{drivecardId} {
      allow read: if true; // Allow all users to read drivecards (for the map/drive mode)
      allow write: if request.auth != null && request.auth.uid == resource.data.userID;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userID;
    }

    // Allow authenticated users to manage their own itineraries
    match /itineraries/{itineraryId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userID || // Owner can always read
        resource.data.isPublic == true // Anyone can read public itineraries
      );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userID;
      allow update: if request.auth != null && request.auth.uid == resource.data.userID;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userID;
      
      // Allow authenticated users to manage items within their itineraries
      match /items/{itemId} {
        allow read: if request.auth != null && (
          request.auth.uid == get(/databases/$(database)/documents/itineraries/$(itineraryId)).data.userID ||
          get(/databases/$(database)/documents/itineraries/$(itineraryId)).data.isPublic == true
        );
        allow create: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/itineraries/$(itineraryId)).data.userID;
        allow update: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/itineraries/$(itineraryId)).data.userID;
        allow delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/itineraries/$(itineraryId)).data.userID;
      }
    }

    // Allow authenticated users to manage their own tours
    match /tours/{tourId} {
      allow read: if true; // Allow all users to read tours (for public sharing)
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creatorId;
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
      
      // Allow authenticated users to manage tour reviews
      match /reviews/{reviewId} {
        allow read: if true; // Anyone can read tour reviews
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId; // Users can create reviews
        allow update: if request.auth != null && request.auth.uid == resource.data.userId; // Users can update their own reviews
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId; // Users can delete their own reviews
      }
      
      // Allow authenticated users to manage tour ratings
      match /ratings/{userId} {
        allow read: if true; // Anyone can read tour ratings (for averages)
        allow write: if request.auth != null && request.auth.uid == userId; // Users can only write their own ratings
      }
      
      // Allow anyone to read tour rating stats, authenticated users to write
      match /ratingStats/{document} {
        allow read: if true; // Anyone can read tour rating statistics
        allow write: if request.auth != null; // Only authenticated users can update stats
      }
    }
  }
} 