import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { FaArrowLeft, FaHome, FaSave, FaMagic } from 'react-icons/fa';
import { useVostcard } from '../context/VostcardContext';
import { generateScript } from '../utils/openaiHelper';

const ScriptEditorView: React.FC = () => {
  const navigate = useNavigate();
  const { scriptId } = useParams<{ scriptId: string }>();
  const { scripts, loadScripts, saveScript, updateScript } = useVostcard();
  
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [polishing, setPolishing] = useState(false);
  const [isNewScript, setIsNewScript] = useState(true);

  useEffect(() => {
    // Load scripts when component mounts
    loadScripts();
  }, [loadScripts]);

  useEffect(() => {
    if (scriptId && scriptId !== 'new' && scripts.length > 0) {
      // Editing existing script
      const script = scripts.find(s => s.id === scriptId);
      if (script) {
        setTitle(script.title || '');
        setContent(script.content || '');
        setIsNewScript(false);
        console.log('📜 Loaded script for editing:', script);
      } else {
        console.error('❌ Script not found:', scriptId);
        alert('Script not found');
        navigate('/script-library');
      }
    } else if (!scriptId || scriptId === 'new') {
      // Creating new script
      setTitle('');
      setContent('');
      setIsNewScript(true);
      console.log('📜 Creating new script');
    }
  }, [scriptId, scripts, navigate]);

  const handleSave = async () => {
    if (!title.trim()) {
      alert('Please enter a title for your script');
      return;
    }
    
    if (!content.trim()) {
      alert('Please enter some content for your script');
      return;
    }

    setSaving(true);
    try {
      if (isNewScript) {
        // Create new script
        const newScript = {
          id: '', // Will be generated by Firebase
          title: title.trim(),
          content: content.trim(),
          authorId: '', // Will be set by saveScript
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          tags: []
        };
        await saveScript(newScript);
        console.log('✅ New script created');
        alert('Script created successfully!');
      } else {
        // Update existing script
        if (scriptId) {
          await updateScript(scriptId, title.trim(), content.trim());
          console.log('✅ Script updated');
          alert('Script updated successfully!');
        }
      }
      
      navigate('/script-library');
    } catch (error) {
      console.error('❌ Error saving script:', error);
      alert('Failed to save script. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  const handleBack = () => {
    navigate('/script-library');
  };

  const handlePolishScript = async () => {
    if (!content.trim()) {
      alert('Please enter some content to polish');
      return;
    }

    setPolishing(true);
    try {
      const polishedScript = await generateScript(`Polish this script: ${content}`, "Professional");
      setContent(polishedScript);
    } catch (err) {
      console.error('Script polishing error:', err);
      alert('Failed to polish script. Please try again.');
    } finally {
      setPolishing(false);
    }
  };

  return (
    <div style={{ 
      maxWidth: 1000, 
      margin: '0 auto', 
      padding: 20,
      minHeight: '100vh',
      backgroundColor: '#f5f5f5'
    }}>
      {/* Header */}
      <div style={{ 
        marginBottom: 20, 
        background: 'white', 
        padding: 20, 
        borderRadius: 15, 
        boxShadow: '0 8px 32px rgba(0,0,0,0.1)' 
      }}>
        {/* First Line: Back/Home Icons and Save Script */}
        <div style={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center', 
          marginBottom: 15 
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: 15 }}>
            <button 
              onClick={handleBack}
              style={{ 
                background: '#667eea', 
                color: 'white', 
                border: 'none', 
                padding: 12, 
                borderRadius: 10, 
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
            >
              <FaArrowLeft size={20} />
            </button>
            <button 
              onClick={() => navigate('/home')}
              style={{ 
                background: '#667eea', 
                color: 'white', 
                border: 'none', 
                padding: 12, 
                borderRadius: 10, 
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
            >
              <FaHome size={20} />
            </button>
          </div>
          
          <button 
            onClick={handleSave}
            disabled={saving || !title.trim() || !content.trim()}
            style={{ 
              background: (!title.trim() || !content.trim() || saving) ? '#ccc' : 'linear-gradient(135deg, #28a745 0%, #20c997 100%)', 
              color: 'white', 
              border: 'none', 
              padding: '12px 24px', 
              borderRadius: 10, 
              cursor: (!title.trim() || !content.trim() || saving) ? 'not-allowed' : 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: 8
            }}
          >
            <FaSave /> {saving ? 'Saving...' : 'Save Script'}
          </button>
        </div>
        
        {/* Second Line: Title */}
        <div>
          <h1 style={{ margin: 0, color: '#333' }}>
            {isNewScript ? 'Create New Script' : 'Edit Script'}
          </h1>
        </div>
      </div>

      {/* Editor Content */}
      <div style={{ 
        background: 'white', 
        borderRadius: 15, 
        boxShadow: '0 8px 32px rgba(0,0,0,0.1)', 
        padding: 30
      }}>
        {/* Title Input */}
        <div style={{ marginBottom: 20 }}>
          <label style={{ 
            display: 'block', 
            marginBottom: 8, 
            fontWeight: 600, 
            color: '#333',
            fontSize: '1.1rem'
          }}>
            Script Title
          </label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Enter a title for your script..."
            style={{
              width: '100%',
              padding: '12px 16px',
              border: '2px solid #e1e5e9',
              borderRadius: 8,
              fontSize: '1rem',
              outline: 'none',
              transition: 'border-color 0.2s',
              boxSizing: 'border-box'
            }}
            onFocus={(e) => e.target.style.borderColor = '#667eea'}
            onBlur={(e) => e.target.style.borderColor = '#e1e5e9'}
          />
        </div>

        {/* Content Textarea */}
        <div style={{ marginBottom: 20 }}>
          <label style={{ 
            display: 'block', 
            marginBottom: 8, 
            fontWeight: 600, 
            color: '#333',
            fontSize: '1.1rem'
          }}>
            Script Content
          </label>
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Write your script content here..."
            rows={15}
            style={{
              width: '100%',
              padding: '16px',
              border: '2px solid #e1e5e9',
              borderRadius: 8,
              fontSize: '1rem',
              outline: 'none',
              transition: 'border-color 0.2s',
              resize: 'vertical',
              fontFamily: 'inherit',
              lineHeight: 1.5,
              boxSizing: 'border-box'
            }}
            onFocus={(e) => e.target.style.borderColor = '#667eea'}
            onBlur={(e) => e.target.style.borderColor = '#e1e5e9'}
          />
        </div>

        {/* Character Count */}
        <div style={{ 
          textAlign: 'right', 
          color: '#666', 
          fontSize: '0.9rem',
          marginBottom: 20
        }}>
          {content.length} characters
        </div>

        {/* Polish Script Button */}
        <div style={{ marginBottom: 20 }}>
          <button 
            onClick={handlePolishScript}
            disabled={polishing || !content.trim()}
            style={{ 
              background: polishing ? '#ccc' : 'linear-gradient(135deg, #8e44ad 0%, #9b59b6 100%)', 
              color: 'white', 
              border: 'none', 
              padding: '12px 20px', 
              borderRadius: 8, 
              cursor: (polishing || !content.trim()) ? 'not-allowed' : 'pointer',
              fontSize: '0.95rem',
              display: 'flex',
              alignItems: 'center',
              gap: 8,
              width: '100%',
              justifyContent: 'center'
            }}
          >
            <FaMagic /> {polishing ? 'Polishing Script...' : 'Polish My Script with AI'}
          </button>
        </div>

        {/* Action Buttons */}
        <div style={{ display: 'flex', gap: 12, justifyContent: 'flex-end' }}>
          <button 
            onClick={handleBack}
            style={{ 
              background: '#6c757d', 
              color: 'white', 
              border: 'none', 
              padding: '10px 20px', 
              borderRadius: 8, 
              cursor: 'pointer',
              fontSize: '0.95rem'
            }}
          >
            Cancel
          </button>
          <button 
            onClick={handleSave}
            disabled={saving || !title.trim() || !content.trim()}
            style={{ 
              background: (!title.trim() || !content.trim() || saving) ? '#ccc' : 'linear-gradient(135deg, #28a745 0%, #20c997 100%)', 
              color: 'white', 
              border: 'none', 
              padding: '10px 20px', 
              borderRadius: 8, 
              cursor: (!title.trim() || !content.trim() || saving) ? 'not-allowed' : 'pointer',
              fontSize: '0.95rem',
              display: 'flex',
              alignItems: 'center',
              gap: 6
            }}
          >
            <FaSave /> {saving ? 'Saving...' : 'Save Script'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ScriptEditorView;